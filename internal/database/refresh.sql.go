// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const lookUpRefresh = `-- name: LookUpRefresh :one
select token, created_at, updated_at, user_id, expires_at, revoked_at
from refresh_tokens
where token = $1 and revoked_at is null
`

func (q *Queries) LookUpRefresh(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, lookUpRefresh, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
update refresh_tokens
set revoked_at = now(), updated_at = now()
where token = $1
`

func (q *Queries) RevokeToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeToken, token)
	return err
}

const storeRefreshToken = `-- name: StoreRefreshToken :exec
insert into refresh_tokens (token, created_at, updated_at, user_id, expires_at) values (
	$1,
	now(),
	now(),
	$2,
	$3
)
`

type StoreRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt sql.NullTime
}

func (q *Queries) StoreRefreshToken(ctx context.Context, arg StoreRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, storeRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}
